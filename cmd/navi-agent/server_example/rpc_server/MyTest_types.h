/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MyTest_TYPES_H
#define MyTest_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class Response;

class ServiceException;


class Response : public virtual ::apache::thrift::TBase {
 public:

  Response(const Response&);
  Response& operator=(const Response&);
  Response() : responseCode(0), responseJSON() {
  }

  virtual ~Response() throw();
  int32_t responseCode;
  std::string responseJSON;

  void __set_responseCode(const int32_t val);

  void __set_responseJSON(const std::string& val);

  bool operator == (const Response & rhs) const
  {
    if (!(responseCode == rhs.responseCode))
      return false;
    if (!(responseJSON == rhs.responseJSON))
      return false;
    return true;
  }
  bool operator != (const Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Response &a, Response &b);

inline std::ostream& operator<<(std::ostream& out, const Response& obj)
{
  obj.printTo(out);
  return out;
}


class ServiceException : public ::apache::thrift::TException {
 public:

  ServiceException(const ServiceException&);
  ServiceException& operator=(const ServiceException&);
  ServiceException() : exceptionCode(0), exceptionMeg() {
  }

  virtual ~ServiceException() throw();
  int32_t exceptionCode;
  std::string exceptionMeg;

  void __set_exceptionCode(const int32_t val);

  void __set_exceptionMeg(const std::string& val);

  bool operator == (const ServiceException & rhs) const
  {
    if (!(exceptionCode == rhs.exceptionCode))
      return false;
    if (!(exceptionMeg == rhs.exceptionMeg))
      return false;
    return true;
  }
  bool operator != (const ServiceException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(ServiceException &a, ServiceException &b);

inline std::ostream& operator<<(std::ostream& out, const ServiceException& obj)
{
  obj.printTo(out);
  return out;
}



#endif
